# CSS

All of this can be done inside html file, but style sheets are the alterantive to have 'privacy', aka private elements so to say

- Styling: setting properties to change the look
                    - properties are name or value pairs 
                        - can be used in variety of ways 
                                [ "background-color: blue;" ] * simple property 
                                
                                [ "font-family: 'Open Sans', sans-serif;" ] * multi-valued property; list of what fonts can be supported
  "" is only for syntax color                        
                                [ "border: 1px solid #808080;" ] * multi-part property; how wide is border, solid or dashed, and color 
                                
                                [ "padding: 4px;" ] * directional property; padding set to 4 pixels, which is top-bottom-left-right
                                [ "padding: 4px 8px;" ] * vertical and horizontal; top and bottom=4, left and right=8
                                [ "padding: 4px 8px 6px 9px;" ] * all four directions; top-bottom-left-right 
                                [ "padding-left: 8px;" ] * individual direction; defines one of the four directions 

        - Format: 
                                    (body or whatever before braces is called selector)
            body {                * Rule, container for properties
                font-size: 11px;  * property
                color: white;     * property; short or long list with curly brace before and after 
            }                         * do not have to be on their own line and white spaces ignored; can put them all on one line or separatly

           [ <main style="background-color: rgb(198, 206, 214); padding: 4px; color: #202020;"> ]


        
        - <style></style> :  * set of text that assigns value/object with designated attributes/values in the 'format' above
                             * applies to all values with that name element 
                             * can add multiable by separating with comma:
                                h1, h2 {}
                <style>
                    main {
                    background-color: rgb(198, 206, 214);
                    padding: 4px;
                    color: #202020;
                    }
                </style>


# Cascading Rule  - whats ahead of the other is overruled/changed 

    body {                  - Rule (container for properties)
        font-size: 11px;
    }

    body {                  - Later property wins [ overrides default behavior in some other file ]
        font-size: 12px;
    }


    body {                 - Less specific or higher in hierarchy
        font-size: 11px;
    }

    h1 {                   - More specific of lower in hierarchy win
        font-size: 18px;    * child of the body, overrides the behavior in this scenario of being after the body 
    }
    

     - <link> : to point at a file, when its in the same directory; telling the page that the link to the css file is a stylesheet
                     * always at the top of the document, and usually in header so it loads them as early as possible
            <link rel="stylesheet" href="/html/sites.css" />

    - font-family : font-family: Verdana, Geneva, Tahoma, sans-serif;
                    * list in the order that vs is going to try and find the fonts
                     [ was in h1, h2; moved to body due to cascading rule] 
    
    - border-radius: 4px; * the larger the more rounded; like a crop option


   #CSS Selectors - so far used element names, which are the simplest of the selectors

    body {                  - selector is the indicator before the braces
                            - element names are just named  
    }

    body, h1 {               - separate items by comma    
    }

    body h1 {                 - designates hierarchy
    }

   body < h1 {                - designates direct children
   }


   # Find an item with a name, well id 

   #someItem {       - indicates a single item by 'id'
   }                        * the #(pound) is looking for an element that has the id of someItem 

   .someItem {        - indicates all items that have names class 
   }                        * an item that has a named class associated with it

              * the selector for id is always going to resolve to a single element
              * named classes always resolve to a collection of everything that has that same class name
      

      <img id="headshot" src="https://www.giantbomb.com/a/uploads/scale_small/0/1212/224950-250px_sonicchannel_blaze.png"
   - giving id to single item :   
                    (html)  The id attribute is a unique identifier of the HTML element. Each id attribute must be unique. 
                            Also, this attribute must begin with a letter and is case sensitive. It can be used as an anchor reference in URL.
                            It isnâ€™t associated with the data within the element.


                #headshot {
                border: 1px solid lightslategray; 
                padding: 2px;
                margin: 8px;
                border-radius: 8px;
                max-width: 150px;
                }
                - find the id with this headshot and only find that one element
                  basically assigning a variable but in a different format
                  an id is more specific than just the name of the tag, so the cascading rule will not overrule the id grab even 
                  if the numbers are greater in the next braces down

        <div id="exper1"> 
        <div id="exper2">   
     - would work for different experience item, but would have duplicate items in css so this is where classes would come in
        so: 
        <div class="expierence">
         * that way, a rule can be created in which it only applies to the div elements that are about expierence  
                
                    .experience {
                border: inset 1px;
                margin-bottom: 4px;
                padding: 4x;
                background-color: white;
                color: #222;
                }
                        
                .experience .title {
                 font-weight: bold;
                }



    # CSS Positioning #

    position: static;       Default behavior
    position: relative;     Relative to where it would be in static; where it would be normally 
    position: absolute;     Specific position on the webpage
    position: fixed;        specific position on the browser window



    # CSS Display Properties #

    display: block;     Takes up all horizontal space unless in fixed position
    display: inline;    Takes specific width with items sharing space, on one line 
    display: hidden;    Takes space but isn't shown, so it's hidden; might leave a white gap or blank spot for that item
    display: none;      Does not take any space and is not shown; disappears and not be reflected in layout of page
    display: flex;      Row/Column based layout; 
    display: grid;      Allows specify site regions for elements 


            #menu li {  /* li is list items; aren't direct children so < isnt going to be used */
                display: inline;
                padding: 8px;
                background-color: darkgray;
                color: white;
                }
    
            #menu li a { /* a is for anchor tag */
                color: white !important; /*!important is an override */
                text-decoration: none;
                }
            
  - Assigned to li ref of home code file -   
                #menu li.active {
                  background-color: darkslateblue;
                 }

                #menu { /*buttons moving to right side of page */
                    float: right;
                }


  # Flexbox Display #  - set by making a container using the displlay of flex; 
                         everything inside of it follows the pattern of the layout

        display: flex; flex-direction; row;     - flex-direction row wont change anything because thats the default  
         |child 1| |child 2| |child 3|  

        display: flex; flex-direction; row-reverse;     - row reserve: not going to care about the order of the items; 
           |child 3| |child 2| |child 1|                  * useful for localization like if you need right to left text for different languages
        
        display: flex; flex-direction; column;       
         |child 1|      - still going to follow the same rules, and support column reverse as well
         |child 2|
         |child 3|  

        display: flex; justify-content: flex-start;     - property that works inside of flex box, by default its flex start so everything will be aligned
         |child 1| |child 2| |child 3|                      to the start of the container

         display: flex; justify-content: flex-end;   or center;   or space-between;  
                                |child 1| |child 2| |child 3|
            - pushes it over to the right hand side, difference from row reserve is the order of the children 